import { LinePayApiClients } from '@/payment-api/type'
import { FormatError } from './error/format'
import { GeneralRequestConfig, GeneralResponseBody } from './type'

export type CheckPaymentStatusRequestParams = {
  /**
   * Payment transaction ID generated by LINE Pay
   */
  transactionId: string
}

export type CheckPaymentStatusRequestConfig = GeneralRequestConfig & {
  /**
   * Request parameters of payment detail API
   */
  params: CheckPaymentStatusRequestParams
}

export type Shipping = {
  /**
   * Shipping method ID selected by user
   */
  methodId: string
  /**
   * Shipping fee
   */
  feeAmount: number
}

export type Info = {
  /**
   * Shipping information
   */
  shipping?: Shipping
}

export type CheckPaymentStatusResponseBody = GeneralResponseBody & {
  /**
   * Payment information
   */
  info?: Info[]
}

export const defaultTimeout = 60000

export const checkPaymentStatusWithClient: LinePayApiClients['checkPaymentStatus'] =
  httpClient => async config => {
    if (!config.params) throw new FormatError('"params" is required')

    const transactionId = config.params.transactionId

    if (!transactionId) throw new FormatError('"transactionId" is required')

    const { data } = await httpClient.get<
      CheckPaymentStatusRequestParams,
      CheckPaymentStatusResponseBody
    >(`/v3/payments/requests/${transactionId}/check`, {
      ...config,
      timeout: config.timeout ?? defaultTimeout
    })

    return data
  }
